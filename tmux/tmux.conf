# 
# More information: https://wiki.archlinux.org/title/tmux
# and https://tmuxcheatsheet.com/tmux-plugins-tools
#
# Install plugins via `prefix + I`
#
# Keybindings cheat sheet (from `DEFAULT KEY BINDINGS` tmux man page)
#   PREFIX+=    Choose which buffer to paste interactively from a list.
#
# Tmux naming structure
#   Session
#   + window0
#   |  + pane0
#   |  | pane1
#   + window1
#   |  + pane1
#

# Explaination: https://unix.stackexchange.com/questions/608142/whats-the-effect-of-escape-time-in-tmux
set -s escape-time 0

# set {back,fore}ground colour for status
set -g status-style 'bg=#333333 fg=#5eacd3'

# set {back,fore}ground colour for the active window
setw -g window-status-current-style 'fg=black bg=green'
# start window count at 1 for easier keyboard access
# Hint: Show pane index via PREFIX+q
set -g base-index 1
# when a window is closed in a session, automatically renumber the other
# windows in numerical order
set -g renumber-windows on

# detect if vim is running in pane
#is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

#bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h' { if -F '#{pane_at_left}' '' 'select-pane -L' }
#bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j' { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
#bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k' { if -F '#{pane_at_top}' '' 'select-pane -U' }
#bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l' { if -F '#{pane_at_right}' '' 'select-pane -R' }

#bind-key -T copy-mode-vi 'C-h' if -F '#{pane_at_left}' '' 'select-pane -L'
#bind-key -T copy-mode-vi 'C-j' if -F '#{pane_at_bottom}' '' 'select-pane -D'
#bind-key -T copy-mode-vi 'C-k' if -F '#{pane_at_top}' '' 'select-pane -U'
#bind-key -T copy-mode-vi 'C-l' if -F '#{pane_at_right}' '' 'select-pane -R'

# bind ctrl+b to ctrl+s
unbind-key C-b
set-option -g prefix C-s
bind-key C-s send-prefix

# reload config
bind-key R source-file ~/.config/tmux/tmux.conf \; \
display-message '.tmux.conf reloaded successfully.'

# split panes using | and - instead of % and "
#bind | split-window -h
#bind - split-window -v
#unbind '"'
#unbind %

# open panes in $PWD
bind '"' split-window -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"

# switch panes using Alt-arrow without prefix
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D

# change keybinding for copy-mode
bind-key -n M-s copy-mode
# keybinding for pasting the value of the buffer
bind-key -n M-a run "tmux load-buffer - ; tmux paste-buffer"

# change keybinds in copy mode for {previous,next}-word
bind-key -T copy-mode C-Left send-key -X previous-word
bind-key -T copy-mode C-Right send-key -X next-word

# create new session
bind S command-prompt -p "New Session:" "new-session -A -s '%%'"
# kill session
bind k confirm-before -p "Kill #S (y/n)?" \
"run-shell 'tmux switch-client -p \\\; kill-session -t \"#S\"'"

# SHIFT+INSERT outputs primary buffer (default)
# CTRL+v outputs clipboard buffer
bind-key -n C-v run "xclip -o -sel clip | tmux load-buffer - ; tmux paste-buffer"

# Bind the default keybind PREFIX+L (jump back to last (previously used)
# session) to PREFIX+l
unbind-key L
bind-key l switch-client -l

# Move to the next window in the session
# Hint: See all windows with PREFIX+w
bind-key p last-window

# Rename window
# Hint:
#   tmux swap-window -s 3 -t 1 - Swap source window 3 with target window 1
bind-key r command-prompt -p "Rename window:" "rename-window '%%'"

# Jump to different session via a short abbreviation of its session name
# instead of typing out the whole session name.
# Note: Multiple sessions with (partly) identical searched for keyword can
# result in an unexpected jump (because of `head -n 1`). Use PREFIX+$ to
# uniquely rename a session if necessary.
bind j command-prompt -p "Jump to Session" \
"run '$HOME/.dotfiles/shell/scripts/tmux-window-searcher -s '%%''"

# Jump to different window via a short abbreviation of its window name.
# Note: Multiple windows with (partly) identical searched for keyword can
# result in an unexpected jump (because the first result is choosen). Use
# PREFIX+r to uniquely name a window beforehand.
bind J command-prompt -p "Jump to Window" \
"run '$HOME/.dotfiles/shell/scripts/tmux-window-searcher -w '%%''"

# Commands to manipulate buffers
bind b list-buffers
bind B choose-buffer

# Order window indexes in session
# e.g. windows "1 3 4 8 9 13" -> "1 2 3 4 5 6"
bind O run "tmux move-window -r &&\
  tmux display-message 'Windows reordered...' ||\
  tmux display-message 'Windows reordering failed'"

### Keybinds for applications ###
## common definitions

# overlayed window (tmux:display-popup), centered, smaller and closes the popup
# after use
POPUP='tmux popup -xC -yC -w85% -h85% -E'

# Find and open projects directories in new session
bind f run-shell "$POPUP $HOME/.dotfiles/shell/scripts/tmux-sessionizer"

# open TODO list either in the project (if exists) or the general todo list
bind D run-shell "$POPUP nano $HOME/Documents/todo/todo.md"

# open lazygit with the current directory (and custom config)
bind g if-shell "[ -d #{pane_current_path}/.git ]" \
  "run-shell '$POPUP -b double lazygit \
  --use-config-file $HOME/.dotfiles/lazygit/config.yml -p #{pane_current_path}'" \
  "display-message 'Not a .git repository. Cant run lazygit.'"

# set colour in tmux session
# https://wiki.archlinux.org/title/tmux#Setting_the_correct_term
# Explaination: https://bash.cyberciti.biz/guide/$TERM_variable
set-option -g default-terminal "screen-256color"
set -ga terminal-overrides ",screen-256color*:Tc"
#set -g default-terminal "tmux-256color"

# FYI: check for true color support using:
# $ tmux info | grep -e RGB -e Tc
#   should return:
#    197: RGB: (flag) true
#    223: Tc: (flag) true

# set default shell to zsh
# set -g default-command /usr/local/bin/zsh

# activate mouse mode
# https://wiki.archlinux.org/title/tmux#Setting_the_correct_term
# Note: This interferes with selection buffer copying and pasting. To
# copy/paste to/from the selection buffer hold the shift key.
set -g mouse on

# plugins for plugin manager
# PREFIX + I - Install plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'

# fast higlighting of matching patterns
# https://github.com/fcsonline/tmux-thumbs
set -g @plugin 'fcsonline/tmux-thumbs'

# easy logging of panes (even after event) to "$HOME/tmux-$session"
# PREFIX + SHIFT + p - Toggle (start/stop) logging in the current pane
# PREFIX + ALT + p - Save visible text, in the current pane.
# PREFIX + ALT + SHIFT + p - Save complete pane history to a file
# PREFIX + ALT + c - clear pane history
# https://github.com/tmux-plugins/tmux-logging
set -g @plugin 'tmux-plugins/tmux-logging'
# set history limit
set -g history-limit 50000

# save all sessions and panes
# https://github.com/tmux-plugins/tmux-resurrect
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @resurrect-capture-pane-contents 'on'
# define which process to additionally resurrect
# standard programs:
# vi vim nvim emacs man less more tail top htop irssi weechat mutt
set -g @resurrect-processes '"git log"'
# to be saved path
set -g @resurrect-dir "$HOME/.config/tmux/history"

# expansion of tmux-ressurect with auto-saving and auto-restore.
# https://github.com/tmux-plugins/tmux-continuum
set -g @plugin 'tmux-plugins/tmux-continuum'
# Set auto-save interval to 30 minutes
set -g @continuum-save-interval '30'
# Last saved environment is automatically restored when tmux is started
set -g @continuum-restore 'on'

# regex search for copy mode
# https://github.com/tmux-plugins/tmux-copycat
set -g @plugin 'tmux-plugins/tmux-copycat'

# https://github.com/gcla/tmux-wormhole
# set -g @plugin 'gcla/tmux-wormhole' 

# https://github.com/tmux-plugins/tmux-yank
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @yank_selection 'clipboard'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '$HOME/.config/tmux/plugins/tpm/tpm'
